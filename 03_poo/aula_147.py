"""
Polimorfismo em Python Orientado a Objetos

Polimorfismo √© o princ√≠pio que permite que classes derivadas de uma mesma superclasse tenham m√©todos iguais (com mesma assinatura) mas comportamentos diferentes.

Assinatura do m√©todo = Mesmo nome e quantidade de par√¢metros (retorno n√£o faz parte da assinatura)

Opini√£o + princ√≠pios que contam:
Assinatura do m√©todo: nome, par√¢metros e retorno iguais

SO"L"ID
Princ√≠pio da substitui√ß√£o de liskov

Objetos de uma superclasse devem ser substitu√≠veis por objetos de uma subclasse sem quebrar a aplica√ß√£o.

Sobrecarga de m√©todos (overload)  üêç = ‚ùå
Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
"""
from abc import ABC, abstractmethod


class Notification(ABC):
    def __init__(self, message) -> None:
        self.message = message

    @abstractmethod
    def send(self) -> bool: ...


class EmailNotification(Notification):
    def send(self) -> bool:
        print(f'E-mail: enviando -> {self.message}')
        return True


class SMSNotification(Notification):
    def send(self) -> bool:
        print(f'SMS: enviando -> {self.message}')
        return False


def notify(notification: Notification):
    notification_sent = notification.send()

    if notification_sent:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o N√ÉO enviada')


sms_notification = SMSNotification('Testando notifica√ß√£o via SMS')
email_notification = EmailNotification('Testando notifica√ß√£o via E-MAIL')

notify(sms_notification)
print()
notify(email_notification)
